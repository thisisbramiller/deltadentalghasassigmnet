#!/usr/bin/env python3

import json
import os
from html.parser import HTMLParser
from genericpath import isdir

c_and_cplus = [".cpp", ".c++", ".cxx", ".hpp", ".hh", ".h++", ".hxx", ".c," ".cc", ".h"]
csharp = [".sln", ".csproj", ".cs", ".cshtml", ".xaml"]
golang = [".go"]
java = [".java"]
javascript = [".js", ".jsx", ".mjs", ".es", ".es6", ".vue", ".hbs", ".ejs", ".njk", ".json", ".raml"]
javascript_html = [".htm", ".html", ".xhtm", ".xhtml", ".xml"]
python_lang = [".py"]
ruby = [".rb", ".erb", ".gemspec", "Gemfile"]
typescript = [".ts", ".tsx", ".mts", ".cts"]

lines = list(open("./.github/scripts/diff.txt").readlines())
outlines = dict()
outlines["include"] = set()

class myhtmlparser(HTMLParser):
    def __init__(self):
        super().__init__()
        self.reset()
        self.NEWTAGS = []
        self.NEWATTRS = []
        self.HTMLDATA = []
    def handle_starttag(self, tag, attrs):
        self.NEWTAGS.append(tag)
        self.NEWATTRS.append(attrs)
    def handle_data(self, data):
        self.HTMLDATA.append(data)
    def clean(self):
        self.NEWTAGS = []
        self.NEWATTRS = []
        self.HTMLDATA = []

def serialize_sets(obj):
    if isinstance(obj, set):
        l = list()
        for item in obj:
            if isinstance(item, tuple):
                l.append(dict((x, y) for x, y in item))
        return l

def find_in_list(list, string):
    for item in list:
        if string.strip().endswith(item):
            return True
    return False

def check_html_for_js(file):
    parser = myhtmlparser()
    buf = open(file, "r").read()
    parser.feed(buf)
    for i in range(len(parser.NEWTAGS)):
        if parser.NEWTAGS[i] == "script":
            for j in range(len(parser.NEWATTRS[i])):
                if parser.NEWATTRS[i][j][0] == "type":
                    if find_in_list(javascript, parser.NEWATTRS[i][j][1]):
                        return True
    return False

for line in lines:
    path = line.split('/')[0]
    if find_in_list(c_and_cplus, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "cpp"}).items()))
    if find_in_list(csharp, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "csharp"}).items()))
    if find_in_list(golang, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "go"}).items()))
    if find_in_list(java, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "java"}).items()))
    if find_in_list(javascript, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "javascript"}).items()))
    if find_in_list(javascript_html, line) and (os.path.isdir(path)):
        if (check_html_for_js(line)):
            outlines["include"].add(tuple(dict({"target-dir": path, "languages": "javascript"}).items()))
    if find_in_list(python_lang, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "python"}).items()))
    if find_in_list(ruby, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "ruby"}).items()))
    if find_in_list(typescript, line) and (os.path.isdir(path)):
        outlines["include"].add(tuple(dict({"target-dir": path, "languages": "javascript"}).items()))
    
print(json.dumps(outlines, default=serialize_sets))